#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function template for C++

class Solution{
    private:
    // vector<string> result;
    void helper(int x,int y,vector<vector<int>> &grid,vector<vector<bool>> visited,vector<string> &result,string path){
        int n = grid.size();
        // int n_cols = grid.at(0).size();
        visited.at(x).at(y) = true;
        if(x == n-1 && y == n-1){
            result.push_back(path);
            return;
        }
        
        if(x < n-1 && grid.at(x+1).at(y) && !visited.at(x+1).at(y)){
            helper(x+1,y,grid,visited,result,path+"D");
        }
        if(y > 0 && grid.at(x).at(y-1) && !visited.at(x).at(y-1)){
            helper(x,y-1,grid,visited,result,path+"L");
        }
        if(y < n-1 && grid.at(x).at(y+1) && !visited.at(x).at(y+1)){
            helper(x,y+1,grid,visited,result,path+"R");
        }
        if(x > 0 && grid.at(x-1).at(y) && !visited.at(x-1).at(y)){
            helper(x-1,y,grid,visited,result,path+"U");
        }
    }
    public:
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<string> result;
        if(!m.at(0).at(0)) return result;
        vector<vector<bool>> visited(n,vector<bool>(n,false));
        // string temp = "";
        helper(0,0,m,visited,result,"");
        return result;
    }
};

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int> (n,0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m, n);
        sort(result.begin(), result.end());
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++) cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}
